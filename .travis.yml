# This is a weird way of telling Travis to use the fast container-based test
# runner instead of the slow VM-based runner.
sudo: false

language: go

# Only the last two Go releases are supported by the Go team with security
# updates. Any older versions be considered deprecated. Don't bother testing
# with them.
go:
    - 1.10.x

# Only clone the most recent commit.
git:
depth: 1

# Don't email me the results of the test runs.
notifications:
email: false

# Anything in before_script that returns a nonzero exit code will flunk the
# build and immediately stop. It's sorta like having set -e enabled in bash.
# Make sure golangci-lint is vendored by running
#   dep ensure -add github.com/golangci/golangci-lint/cmd/golangci-lint
# ...and adding this to your Gopkg.toml file.
#   required = ["github.com/golangci/golangci-lint/cmd/golangci-lint"]

install:
    # needed for the snap pipe:
    - # sudo snap install snapcraft --classic
    # download coveralls for go
    - # go get github.com/mattn/goveralls
    # install golangci-lint
    - # curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | bash -s -- -b $GOPATH/bin v1.9.1
    # install dep
    - curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh

before_script:
    # download vendor dependencies
    - $GOPATH/bin/dep ensure

# script always runs to completion (set +e). If we have linter issues AND a
# failing test, we want to see both. Configure golangci-lint with a
# .golangci.yml file at the top level of your repo.
script:
    # - golangci-lint run       # run a bunch of code checkers/linters in parallel
    # - $GOPATH/bin/goveralls -v -service=travis-pro # run coverall
    # for codeship
    - go build -v
    # Run all the tests with the race detector enabled
    - go test -v -race ./...

after_success:
    - echo "Build success"
    - echo "travis go version='$TRAVIS_GO_VERSION'"
    - echo "goveralls"
    - go get github.com/mattn/goveralls
    - $GOPATH/bin/goveralls -v -race -service=travis-ci